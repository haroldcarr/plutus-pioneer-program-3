#+OPTIONS:     H:6 num:nil toc:nil \n:nil @:t ::t |:t ^:t f:t TeX:t ...

Source : https://github.com/input-output-hk/plutus-pioneer-program#lecture-6

How to interact with Cardano testnet via CLI and PAB

#+begin_comment
 (eepitch-shell)
 (eepitch-kill)
 (eepitch-shell)
#+end_comment

*environment*

#+begin_src
export C=~/Cardano
export CN=${C}/cardano-node-1.34.1
export PATH=${CN}:${PATH}

export PPME3=${C}/plutus-pioneer-program-me/Lecture-03
export PPME3TN=${PPME3}/testnet
export CARDANO_NODE_SOCKET_PATH=${PPME3TN}/node.socket

export PP6=${C}/plutus-pioneer-program/code/week06
export PPME6=${C}/plutus-pioneer-program-me/Lecture-06
export PP6TN=${C}/plutus-pioneer-program/code/week06/testnet
export PPME6TN=${C}/plutus-pioneer-program-me/Lecture-06/testnet
mkdir  ${PPME6TN}
export PP6SRC=${PP6}/src/Week06

export MAGIC='--testnet-magic 1097911063'
#+end_src

*build*

[[../0-README-setup.org::weekly-steps]]

------------------------------------------------------------------------------
* Part 1 - Introduction

https://www.youtube.com/watch?v=TfWKxdli4eI

Lecture-03 showed how to interact with testnet via CLI.

This lecture will interact with testnet again via
- CLI
- Plutus Application Backend (PAB)

Example : minting native tokens (like in Lecture-05).

------------------------------------------------------------------------------
* Part 2 - The Minting Policy

https://www.youtube.com/watch?v=w7_27sQIqkY

#+begin_src
tree ${PP6SRC}
cat  ${PP6SRC}/Token/OnChain.hs
#+end_src
- similar to Lecture-05 NFT example
- except takes number of coins to mint

------------------------------------------------------------------------------
* Part 3 - Minting with the CLI

https://www.youtube.com/watch?v=kfvzrC9J02k

#+begin_src
# serializes script to disk
cat ${PP6SRC}/Utils.hs | grep writeMintingPolicy
#+end_src

MintingPolicy has 3 parameters
- ref to UTxO being consumed =TxOutRef=
  - https://playground.plutus.iohkdev.io/doc/haddock/plutus-ledger-api/html/Plutus-V1-Ledger-Contexts.html
- token name
- amount

#+begin_src
# start cardano-node
cd ${PPME3TN}
./start-node-testnet.sh

# the socket that provides the interface from the node
ls -alF ${CARDANO_NODE_SOCKET_PATH}
#+end_src

Need one key pair in this lecture.
Use the pair from lecture 3.

#+begin_src
ls -alF ${PPME3TN}/*key*
cp ${PPME3TN}/01.?key ${PPME6TN}
cp ${PPME3TN}/01.addr ${PPME6TN}
cd ${PP6TN}
ln -s ${PPME6TN}/01.addr
ln -s ${PPME6TN}/01.skey
ln -s ${PPME6TN}/01.vkey
#+end_src

#+begin_src
ls -alF ${PP6}
ls -alF ${PP6TN}
#+end_src
- =add skey vkey=
  - public/private keys and addresses
- =v= : verification
- =s= : signing

#+begin_src
cat ${PP6}/query-key1.sh
#+end_src
- command  : =query utxo=
- =$MAGIC= : testnet or mainnet
- address  : to lookup UTxOs for

#+begin_src
cat ${PP6}/env.sh
#+end_src
- defines =MAGIC=, etc.
- /I do not use this/ -- I define things in this file

#+begin_src
# 10:36
cd ${PP6}
./query-key1.sh

# turn <TxHash>#0 into =TxOutRef= using
cat ${PP6SRC}/Utils.hs | grep unsafeReadTxOutRef

# assumes correct checked out a correct tag
cd ${C}/plutus-apps
nix-shell
cd ${PP6}
cabal clean
cabal update
cabal build
cabal repl

import Week06.Utils        --   v the TxHash return from 10:36 query
unsafeReadTxOutRef "d5fd871e73b8384b6d6c8f6d99587e0aa01d61ca8f1912faf6017acbeb968621#0"
:q

# serialize the minting policy
cat ${PP6}/app/token-policy.hs

cabal exec token-policy -- \
      ${PPME6}/policy.plutus \
      'd5fd871e73b8384b6d6c8f6d99587e0aa01d61ca8f1912faf6017acbeb968621#0' \
      123456 \
      PPP
cat ${PPME6}/policy.plutus

# 16:47
# mint via CLI

# v is what to mint
cat ${PP6}/mint-token-cli.sh

# 20:22
cat ${PP6SRC}/Utils.hs | grep unsafeTokenNameToHex
cat ${PP6}/app/token-name.hs
cabal exec token-name -- PPP

# 30:45
./query-key1.sh

./mint-token-cli.sh \
  d5fd871e73b8384b6d6c8f6d99587e0aa01d61ca8f1912faf6017acbeb968621#0 \
  123456 \
  PPP \
  testnet/01.addr \
  testnet/01.skey

# =>
oref: d5fd871e73b8384b6d6c8f6d99587e0aa01d61ca8f1912faf6017acbeb968621#0
amt: 123456
tn: PPP
address file: testnet/01.addr
signing key file: testnet/01.skey
currency symbol: 64cb0805e86ab19fd59e5401ed0da3df3f43af73d9a6f79279ca469d
token name (hex): 505050
minted value: 123456 64cb0805e86ab19fd59e5401ed0da3df3f43af73d9a6f79279ca469d.505050
address: addr_test1vzuwm56nwvp8f3p55tav68nltjlv686hmeu6wlwc5vdjxvqezrrny
Estimated transaction fee: Lovelace 343733
Transaction successfully submitted.

# 31:53
# wait for next block (usually 20 seconds)

./query-key1.sh

# also see via : https://explorer.cardano-testnet.iohkdev.io/en.html
#+end_src

------------------------------------------------------------------------------
* Part 4 - Deployment Scenarios

https://www.youtube.com/watch?v=tW7uoY16gC0

https://plutus.readthedocs.io/en/latest/

https://docs.cardano.org/plutus/Plutus-tools

How to do what was done with CLI with PAB.

Will use "hosted" scenario.
(Note: not ideal.  "Browser wallet" would be better, but not ready yet.)

------------------------------------------------------------------------------
* Part 5 - The Contracts

https://www.youtube.com/watch?v=JgNhY_uuuGA

#+begin_comment
cp ${PP6SRC}/Token/OffChain.hs ${PPME6}
#+end_comment

See annotated [[./OffChain.hs]]

=Week06.Trace= has EmulatorTrace test

#+begin_src
cd ${C}/plutus-apps
nix-shell
cd ${PP6}
cabal repl
import Week06.Trace
testToken
# => log contains something like
Wallet 872cb83b5ee40eb23bfdab1772660c822a48d491:
    {, ""}: 99996869
    {7aa78d513a7ecbffa84ff774c425bdbfa3207e469dde3ebaae7a97b9, "USDT"}: 100000
:q
#+end_src

The mint contract is not a typical PAB contract since it
- has no endpoints
- does not return info to user
- runs once and exits

=Week06.Monitor= : another contract to exercise the PAB
- no endpoints (Lars feels endpoints are not that useful)
- long running
- monitors an address
  - reports via Writer monad

------------------------------------------------------------------------------
* Part 6 - Minting with the PAB

https://www.youtube.com/watch?v=X6AyZIZ0vaE

#+begin_src
# "wrap" the mint script and the monitor contract
cat ${PP6SRC}/PAB.hs

# application that starts the PAB with above contracts
cat ${PP6}/app/token-pab.hs
#+end_src

must first start other applications

** assumes cardano-node is running

see Week03

https://github.com/input-output-hk/plutus-apps/blob/main/plutus-pab/test-node/README.md
- Instructions for running a public testnet end-to-end integration test
- the following is doing these steps

** start-testnet-wallet

#+begin_src
cd ${C}/plutus-apps
nix-shell
cd ${PP6}
./start-testnet-wallet.sh
#+end_src

** create-wallet

in another shell

#+begin_src
cd ${C}/plutus-apps
nix-shell
cd ${PP6}
./create-wallet.sh HCWallet hcsecretpassphrase ${PPME6TN}/restore-wallet.json
cd ${PP6TN}
ln -s ${PPME6TN}/restore-wallet.json
cat ${PPME6TN}/restore-wallet.json
#+end_src

** import / link

8:24 : steps not shown
- import 'restore-wallet.json' into your Daedalus or Yoroi wallet
- link up D or Y wallet to wallet created above

** 8:42 : fund wallet

steps not shown

 either
- send funds from existing wallet to new one, or
- use the testnet faucet

** 8:58 : load-wallet

inform wallet backend about new wallet

#+begin_src
cd ${PP6}
cat ./load-wallet.sh
./load-wallet.sh
# => {"balance":{"total":{"quantity":0,"unit":"lovelace"},
                 "available":{"quantity":0,"unit":"lovelace"},
                 "reward":{"quantity":0,"unit":"lovelace"}},
       "name":"HCWallet",
       "id":"03f58cc73ff5369672d60dc1562d43999d5d01ba",  <-- use this to talk to PAB
       "tip":{"height":{"quantity":0,"unit":"block"},
              "epoch_number":0,"time":"2019-07-24T20:20:16Z",
              "absolute_slot_number":0,"slot_number":0},
       "passphrase":{"last_updated_at":"2022-03-13T00:59:43.351567Z"},
       "address_pool_gap":20,
       "state":{"status":"syncing","progress":{"quantity":0,"unit":"percent"}},
       "delegation":{"next":[],"active":{"status":"not_delegating"}},
       "assets":{"total":[],"available":[]}}

export WALLETID=03f58cc73ff5369672d60dc1562d43999d5d01ba

cardano-wallet wallet list
#+end_src

** 10:54 start-testnet-chain-index

#+begin_src
cp ${PP6TN}/chain-index-config.json ${PPME6TN}
# ${PPME6TN}/chain-index-config.json
# EDIT:
# - cicSocketPath : ${PPME3TN/node.sock # resolve ${..}
# - cicDbPath     : ${C}/chain-index.db # resolve ${..}
#   - path MUST end with 'chain-index.db'

cd ${C}/plutus-apps
nix-shell
cabal build plutus-pab-examples plutus-chain-index

# NOTE: THIS DOES NOT USE ./start-testnet-chain-index.sh AS IN THE VIDEO
# LARS: syncing this takes time --- maybe even longer than cardano-node
cabal exec plutus-chain-index -- --config ${PPME6TN}/chain-index-config.json start-index
#+end_src

** 12:06 migrate-pab

#+begin_src
# go to shell running cardano-node and get the hash and slot off latest 'new-tip'

# LARS : most of this file copied from plutus-apps
cp ${PP6TN}/pab-config.yml ${PPME6TN}
# ${PPME6TN}/pab-config.yml
# EDIT:
# - dbConfig.dbConfigFile: ${C}/plutus-pab.db # resolve ${..}
#
# - nodeServerConfig.pscSocketPath: ${PPME3TN/node.sock # resolve ${..}
#
# - developmentOptions.pabResumeFrom.pointBlockId : <new tip hash>
# - developmentOptions.pabResumeFrom.pointSlot    : <new tip slot>

cd ${PP6}
cabal run -- token-pab --config ${PPME6TN}/pab-config.yml migrate
# => Up to date
#+end_src

** start-testnet-pab

in another nix-shell

#+begin_src
cd ${C}/plutus-apps
nix-shell
cd ${PP6}
cabal run -- token-pab \
  --config ${PPME6TN}/pab-config.yml webserver \
  --passphrase hcsecretpassphrase
# =>
Up to date
[pab:Info:11] [2022-03-13 20:31:33.62 UTC] Restoring PAB state ...
[pab:Info:11] [2022-03-13 20:31:33.62 UTC] No contract instance were restored in the PAB state.
[pab:Info:11] [2022-03-13 20:31:33.62 UTC] Starting PAB backend server on port 9080

http://localhost:9080/swagger/swagger-ui/

#+begin_src
curl -X 'GET' \
  'http://localhost:9080/api/contract/definitions' \
  -H 'accept: application/json;charset=utf-8' | jq '.'
# -> [{"csrSchemas":[], ...

curl -X 'GET' \
  'http://localhost:9080/api/contract/instances' \
  -H 'accept: application/json;charset=utf-8' | jq '.'
# => []
#+end_src

** 18:53 activate mint-token-curl

#+begin_src
cd ${PP6}

# addresswhere minted token and change goes to
# get via
# 1. import wallet into Daedalus or Yoroi then press "receive"
# 2. via wallet backend : what follows:

# pick an "unused" address from list returned via:
curl -H "content-type: application/json" \
     -XGET localhost:8090/v2/wallets/$WALLETID/addresses | jq '.'

export ADDRESS=addr_test1qzrgxjw0ntrvv536sl8nadhna49p5h23gjw6pkx9a3lznh5f3wmajsfhk7240ent8g89f99ef975jy7ev3uya88055xsa9t2ed

./mint-token-curl.sh 123456 PPP
# =>
minting 123456 coins of token PPP
payment key hash: 868349cf9ac6c6523a87cf3eb6f3ed4a1a5d51449da0d8c5ec7e29de
stake key hash: 898bb7d94137b79557e66b3a0e5494b9497d4913d964784e9cefa50d
{"unContractInstanceId":"439eb8d8-9a3e-4c66-9685-e4bc021982ae"}

# at this point: token minted via PAB (like done with CLI)

# this now returns a NON-empty array
curl -X 'GET' \
  'http://localhost:9080/api/contract/instances' \
  -H 'accept: application/json;charset=utf-8' | jq '.'
#+end_src

- CLI
  - PRO
    - only needs cardano-node
  - CON
    - but text-only
    - manual lookup of UTxO to use as input

- PAB
  - PRO
    - UTxO input taken care of automatically
  - CON
    - needs cardano-node, wallet backend, chain index

** 25:11 mint via Haskell

uses Req (instead of curl)


#+begin_src
cat ${PP6}/app/mint-token.hs

cd ${PP6}

cabal run mint-token -- 654321 JUNK ${WALLETID} ${ADDRESS}
# =>
Up to date
minting token for wallet id 03f58cc73ff5369672d60dc1562d43999d5d01ba with parameters TokenParams {tpToken = "JUNK", tpAmount = 654321, tpAddress = Address {addressCredential = PubKeyCredential 868349cf9ac6c6523a87cf3eb6f3ed4a1a5d51449da0d8c5ec7e29de, addressStakingCredential = Just (StakingHash (PubKeyCredential 898bb7d94137b79557e66b3a0e5494b9497d4913d964784e9cefa50d))}}
minted tokens, contract instance id: ContractInstanceId {unContractInstanceId = ed604d15-cfaf-4455-9c3b-54ea343707c6}
#+end_src

The shell running the PAB will show something like

#+begin_example
[pab:Info:128] [2022-03-15 17:52:43.60 UTC]
Initialising contract Mint
(TokenParams { tpToken = "JUNK", tpAmount = 654321
             , tpAddress = Address { addressCredential = PubKeyCredential 868349cf9ac6c6523a87cf3eb6f3ed4a1a5d51449da0d8c5ec7e29de
                                   , addressStakingCredential = Just (StakingHash (PubKeyCredential 898bb7d94137b79557e66b3a0e5494b9497d4913d964784e9cefa50d))}})
with ID 7ac95541-817f-435c-a3f1-9695900c725f

[pab:Info:128] [2022-03-15 17:52:43.60 UTC]
Activated instance 7ac95541-817f-435c-a3f1-9695900c725f on W03f58cc

[pab:Info:130] [2022-03-15 17:52:43.97 UTC]
7ac95541-817f-435c-a3f1-9695900c725f:
"minted Value
 (Map [(95fe13d5e382c3b64afb0b7668a3bf7f021abf7de6b63da21c30a363,Map [(\"JUNK\",654321)])])"
#+end_example

** 29:38 monitor

To avoid having so many log messages from above work, clear and restart PAB.

#+begin_src
# stop the PAB
# NOT SHOWN IN LECTURE
# go to shell where PAB is running and hit C-c

# clear the database
rm ${C}/plutus-pab.db

# migrate again to set up an empty database
cd ${PP6}
cabal run -- token-pab --config ${PPME6TN}/pab-config.yml migrate

# restart the PAB
cabal run -- token-pab \
  --config ${PPME6TN}/pab-config.yml webserver \
  --passphrase hcsecretpassphrase
#+end_src

Monitor via Haskell version because easier to extract status.

#+begin_src
cd ${PP6}
cat ${PP6}/app/monitor.hs

# in a separate shell
cabal exec monitor -- ${WALLETID} ${ADDRESS}
# =>
monitoring address Address {addressCredential = PubKeyCredential 868...} on wallet 03f58cc73ff5369672d60dc1562d43999d5d01ba
started monitor-process with contract id e52d025f-8213-40db-8fef-efdabae48932

[(95fe13d5e382c3b64afb0b7668a3bf7f021abf7de6b63da21c30a363,"JUNK",654321),(,"",2000000)]

# in a new shell
curl -X 'GET' \
  'http://localhost:9080/api/contract/instances' \
  -H 'accept: application/json;charset=utf-8' | jq '.' | grep observableState
#+end_src

------------------------------------------------------------------------------
* Part 7 - Summary

https://www.youtube.com/watch?v=KmNOFltlRiA

mint
- via CLI
- via PAB
  - in hosted scenario : PAB needs control over wallet
